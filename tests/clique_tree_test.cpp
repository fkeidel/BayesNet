#include "gtest/gtest.h"
#include "utils.h"
#include "../clique_tree.h"

namespace Bayes {

	TEST(CliqueTree, ComputeInitialPotentials) {
		std::vector < std::vector<uint32_t> > nodes
		{
			{0, 6}, {1, 7}, {2, 8}, {3, 9}, {4, 10}, {5, 11}, {0, 2, 3}, {0, 1, 2}, {1, 4, 5}
		};

		std::vector < std::vector<uint32_t> > edges
		{
			{0,	0,	0,	0,	0,	0,	0,	1,	0},
			{0,	0,	0,	0,	0,	0,	0,	0,	1},
			{0,	0,	0,	0,	0,	0,	0,	1,	0},
			{0,	0,	0,	0,	0,	0,	1,	0,	0},
			{0,	0,	0,	0,	0,	0,	0,	0,	1},
			{0,	0,	0,	0,	0,	0,	0,	0,	1},
			{0,	0,	0,	1,	0,	0,	0,	1,	0},
			{1,	0,	1,	0,	0,	0,	1,	0,	1 },
			{0,	1,	0,	0,	1,	1,	0,	1,	0},
		};

		std::vector <Factor> factor_list{
			{{0},     {3},     {0.01,0.18,0.81}},
			{{1,0,2}, {3,3,3}, {1,0,0,0.5,0.5,0,0,1,0,0.5,0.5,0,0.25,0.5,0.25,0,0.5,0.5,0,1,0,0,0.5,0.5,0,0,1}},
			{{2},     {3},     {0.01,0.18,0.81}},
			{{3,0,2}, {3,3,3}, {1,0,0,0.5,0.5,0,0,1,0,0.5,0.5,0,0.25,0.5,0.25,0,0.5,0.5,0,1,0,0,0.5,0.5,0,0,1}},
			{{4,1,5}, {3,3,3}, {1,0,0,0.5,0.5,0,0,1,0,0.5,0.5,0,0.25,0.5,0.25,0,0.5,0.5,0,1,0,0,0.5,0.5,0,0,1}},
			{{5},     {3},     {0.01,0.18,0.81}},
			{{6,0},   {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{7,1},   {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{8,2},   {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{9,3},   {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{10,4},  {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{11,5},  {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}}
		};


		std::vector<Factor> clique_list{
			{{0,6},  {3,2},   {0.008, 0.108, 0.081, 0.002, 0.072, 0.729}},
			{{1,7},  {3,2},   {0.8, 0.6, 0.1, 0.2, 0.4, 0.9}},
			{{2,8},  {3,2},   {0.008, 0.108, 0.081, 0.002, 0.072, 0.729}},
			{{3,9},  {3,2},   {0.8, 0.6, 0.1, 0.2, 0.4, 0.9}},
			{{4,10}, {3,2},   {0.8, 0.6, 0.1, 0.2, 0.4, 0.9}},
			{{5,11}, {3,2},   {0.008, 0.108, 0.081, 0.002, 0.072, 0.729}},
			{{0,2,3},{3,3,3}, {1.0,0.5,0,0.5,0.25,0,0,0,0,0,0.5,1.0,0.5,0.5,0.5,1.0,0.5,0,0,0,0,0,0.25,0.5,0,0.5,1.0}},
			{{0,1,2},{3,3,3}, {1.0,0.5,0,0,0.5,1.0,0,0,0,0.5,0.25,0,0.5,0.5,0.5,0,0.25,0.5,0,0,0,1.0,0.5,0,0,0.5,1.0}},
			{{1,4,5},{3,3,3}, {1.0,0.5,0,0,0.5,1.0,0,0,0,0.5,0.25,0,0.5,0.5,0.5,0,0.25,0.5,0,0,0,1.0,0.5,0,0,0.5,1.0}}
		};

		CliqueTree c{};
		c.nodes = nodes;
		c.edges = edges;
		c.factor_list = factor_list;

		const auto pot = ComputeInitialPotentials(c);
		ExpectFactorsEqual(pot.clique_list, clique_list);
	}

	TEST(CliqueTree, CreateCliqueTree_without_evidence) {
		std::vector <Factor> factor_list{
			{{0},     {3},     {0.01,0.18,0.81}},
			{{1,0,2}, {3,3,3}, {1,0,0,0.5,0.5,0,0,1,0,0.5,0.5,0,0.25,0.5,0.25,0,0.5,0.5,0,1,0,0,0.5,0.5,0,0,1}},
			{{2},     {3},     {0.01,0.18,0.81}},
			{{3,0,2}, {3,3,3}, {1,0,0,0.5,0.5,0,0,1,0,0.5,0.5,0,0.25,0.5,0.25,0,0.5,0.5,0,1,0,0,0.5,0.5,0,0,1}},
			{{4,1,5}, {3,3,3}, {1,0,0,0.5,0.5,0,0,1,0,0.5,0.5,0,0.25,0.5,0.25,0,0.5,0.5,0,1,0,0,0.5,0.5,0,0,1}},
			{{5},     {3},     {0.01,0.18,0.81}},
			{{6,0},   {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{7,1},   {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{8,2},   {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{9,3},   {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{10,4},  {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{11,5},  {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}}
		};

		std::vector<Factor> expected_clique_list{
			{{0,6},  {3,2},   {0.008, 0.108, 0.081, 0.002, 0.072, 0.729}},
			{{1,7},  {3,2},   {0.8, 0.6, 0.1, 0.2, 0.4, 0.9}},
			{{2,8},  {3,2},   {0.008, 0.108, 0.081, 0.002, 0.072, 0.729}},
			{{3,9},  {3,2},   {0.8, 0.6, 0.1, 0.2, 0.4, 0.9}},
			{{4,10}, {3,2},   {0.8, 0.6, 0.1, 0.2, 0.4, 0.9}},
			{{5,11}, {3,2},   {0.008, 0.108, 0.081, 0.002, 0.072, 0.729}},
			{{0,2,3},{3,3,3}, {1.0,0.5,0,0.5,0.25,0,0,0,0,0,0.5,1.0,0.5,0.5,0.5,1.0,0.5,0,0,0,0,0,0.25,0.5,0,0.5,1.0}},
			{{0,1,2},{3,3,3}, {1.0,0.5,0,0,0.5,1.0,0,0,0,0.5,0.25,0,0.5,0.5,0.5,0,0.25,0.5,0,0,0,1.0,0.5,0,0,0.5,1.0}},
			{{1,4,5},{3,3,3}, {1.0,0.5,0,0,0.5,1.0,0,0,0,0.5,0.25,0,0.5,0.5,0.5,0,0.25,0.5,0,0,0,1.0,0.5,0,0,0.5,1.0}}
		};

		std::vector < std::vector<uint32_t> > expected_edges
		{
			{0,	0,	0,	0,	0,	0,	0,	1,	0},
			{0,	0,	0,	0,	0,	0,	0,	0,	1},
			{0,	0,	0,	0,	0,	0,	0,	1,	0},
			{0,	0,	0,	0,	0,	0,	1,	0,	0},
			{0,	0,	0,	0,	0,	0,	0,	0,	1},
			{0,	0,	0,	0,	0,	0,	0,	0,	1},
			{0,	0,	0,	1,	0,	0,	0,	1,	0},
			{1,	0,	1,	0,	0,	0,	1,	0,	1},
			{0,	1,	0,	0,	1,	1,	0,	1,	0},
		};

		const auto c = CreateCliqueTree(factor_list, {});
		ExpectFactorsEqual(c.clique_list, expected_clique_list);
		EXPECT_EQ(c.edges, expected_edges);
	}

}