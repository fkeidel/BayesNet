#include "gtest/gtest.h"
#include "test_utils.h"
#include "bayesnet/clique_tree.h"

namespace Bayes 
{

	TEST(CliqueTree, ComputeInitialPotentials) {
		std::vector < std::vector<uint32_t> > nodes
		{
			{0, 6}, {1, 7}, {2, 8}, {3, 9}, {4, 10}, {5, 11}, {0, 2, 3}, {0, 1, 2}, {1, 4, 5}
		};

		std::vector <Factor> factor_list{
			{{0},     {3},     {0.01,0.18,0.81}},
			{{1,0,2}, {3,3,3}, {1,0,0,0.5,0.5,0,0,1,0,0.5,0.5,0,0.25,0.5,0.25,0,0.5,0.5,0,1,0,0,0.5,0.5,0,0,1}},
			{{2},     {3},     {0.01,0.18,0.81}},
			{{3,0,2}, {3,3,3}, {1,0,0,0.5,0.5,0,0,1,0,0.5,0.5,0,0.25,0.5,0.25,0,0.5,0.5,0,1,0,0,0.5,0.5,0,0,1}},
			{{4,1,5}, {3,3,3}, {1,0,0,0.5,0.5,0,0,1,0,0.5,0.5,0,0.25,0.5,0.25,0,0.5,0.5,0,1,0,0,0.5,0.5,0,0,1}},
			{{5},     {3},     {0.01,0.18,0.81}},
			{{6,0},   {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{7,1},   {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{8,2},   {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{9,3},   {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{10,4},  {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{11,5},  {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}}
		};

		std::vector<Factor> clique_list{
			{{0,6},  {3,2},   {0.008, 0.108, 0.081, 0.002, 0.072, 0.729}},
			{{1,7},  {3,2},   {0.8, 0.6, 0.1, 0.2, 0.4, 0.9}},
			{{2,8},  {3,2},   {0.008, 0.108, 0.081, 0.002, 0.072, 0.729}},
			{{3,9},  {3,2},   {0.8, 0.6, 0.1, 0.2, 0.4, 0.9}},
			{{4,10}, {3,2},   {0.8, 0.6, 0.1, 0.2, 0.4, 0.9}},
			{{5,11}, {3,2},   {0.008, 0.108, 0.081, 0.002, 0.072, 0.729}},
			{{0,2,3},{3,3,3}, {1.0,0.5,0,0.5,0.25,0,0,0,0,0,0.5,1.0,0.5,0.5,0.5,1.0,0.5,0,0,0,0,0,0.25,0.5,0,0.5,1.0}},
			{{0,1,2},{3,3,3}, {1.0,0.5,0,0,0.5,1.0,0,0,0,0.5,0.25,0,0.5,0.5,0.5,0,0.25,0.5,0,0,0,1.0,0.5,0,0,0.5,1.0}},
			{{1,4,5},{3,3,3}, {1.0,0.5,0,0,0.5,1.0,0,0,0,0.5,0.25,0,0.5,0.5,0.5,0,0.25,0.5,0,0,0,1.0,0.5,0,0,0.5,1.0}}
		};

		CliqueTree c{ nodes, factor_list};
	
		c.ComputeInitialPotentials();
		ExpectFactorsEqual(c.CliqueList(), clique_list);
	}

	TEST(CliqueTree, CreateCliqueTree_without_evidence) {
		std::vector <Factor> factor_list{
			{{0},     {3},     {0.01,0.18,0.81}},
			{{1,0,2}, {3,3,3}, {1,0,0,0.5,0.5,0,0,1,0,0.5,0.5,0,0.25,0.5,0.25,0,0.5,0.5,0,1,0,0,0.5,0.5,0,0,1}},
			{{2},     {3},     {0.01,0.18,0.81}},
			{{3,0,2}, {3,3,3}, {1,0,0,0.5,0.5,0,0,1,0,0.5,0.5,0,0.25,0.5,0.25,0,0.5,0.5,0,1,0,0,0.5,0.5,0,0,1}},
			{{4,1,5}, {3,3,3}, {1,0,0,0.5,0.5,0,0,1,0,0.5,0.5,0,0.25,0.5,0.25,0,0.5,0.5,0,1,0,0,0.5,0.5,0,0,1}},
			{{5},     {3},     {0.01,0.18,0.81}},
			{{6,0},   {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{7,1},   {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{8,2},   {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{9,3},   {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{10,4},  {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{11,5},  {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}}
		};

		std::vector<Factor> expected_clique_list{
			{{0,6},  {3,2},   {0.008, 0.108, 0.081, 0.002, 0.072, 0.729}},
			{{1,7},  {3,2},   {0.8, 0.6, 0.1, 0.2, 0.4, 0.9}},
			{{2,8},  {3,2},   {0.008, 0.108, 0.081, 0.002, 0.072, 0.729}},
			{{3,9},  {3,2},   {0.8, 0.6, 0.1, 0.2, 0.4, 0.9}},
			{{4,10}, {3,2},   {0.8, 0.6, 0.1, 0.2, 0.4, 0.9}},
			{{5,11}, {3,2},   {0.008, 0.108, 0.081, 0.002, 0.072, 0.729}},
			{{0,2,3},{3,3,3}, {1.0,0.5,0,0.5,0.25,0,0,0,0,0,0.5,1.0,0.5,0.5,0.5,1.0,0.5,0,0,0,0,0,0.25,0.5,0,0.5,1.0}},
			{{0,1,2},{3,3,3}, {1.0,0.5,0,0,0.5,1.0,0,0,0,0.5,0.25,0,0.5,0.5,0.5,0,0.25,0.5,0,0,0,1.0,0.5,0,0,0.5,1.0}},
			{{1,4,5},{3,3,3}, {1.0,0.5,0,0,0.5,1.0,0,0,0,0.5,0.25,0,0.5,0.5,0.5,0,0.25,0.5,0,0,0,1.0,0.5,0,0,0.5,1.0}}
		};

		std::vector < std::vector<uint32_t> > expected_edges
		{
			{0,	0,	0,	0,	0,	0,	0,	1,	0},
			{0,	0,	0,	0,	0,	0,	0,	0,	1},
			{0,	0,	0,	0,	0,	0,	0,	1,	0},
			{0,	0,	0,	0,	0,	0,	1,	0,	0},
			{0,	0,	0,	0,	0,	0,	0,	0,	1},
			{0,	0,	0,	0,	0,	0,	0,	0,	1},
			{0,	0,	0,	1,	0,	0,	0,	1,	0},
			{1,	0,	1,	0,	0,	0,	1,	0,	1},
			{0,	1,	0,	0,	1,	1,	0,	1,	0}
		};

		CliqueTree c{ factor_list, {} };
		ExpectFactorsEqual(c.CliqueList(), expected_clique_list);
		EXPECT_EQ(c.GetCliqueEdges(), expected_edges);
	}

	TEST(CliqueTree, GetNextCliques) {
		std::vector<Factor> clique_list{
			{{0,6},  {3,2},   {0.008, 0.108, 0.081, 0.002, 0.072, 0.729}},
			{{1,7},  {3,2},   {0.8, 0.6, 0.1, 0.2, 0.4, 0.9}},
			{{2,8},  {3,2},   {0.008, 0.108, 0.081, 0.002, 0.072, 0.729}},
			{{3,9},  {3,2},   {0.8, 0.6, 0.1, 0.2, 0.4, 0.9}},
			{{4,10}, {3,2},   {0.8, 0.6, 0.1, 0.2, 0.4, 0.9}},
			{{5,11}, {3,2},   {0.008, 0.108, 0.081, 0.002, 0.072, 0.729}},
			{{0,2,3},{3,3,3}, {1.0,0.5,0,0.5,0.25,0,0,0,0,0,0.5,1.0,0.5,0.5,0.5,1.0,0.5,0,0,0,0,0,0.25,0.5,0,0.5,1.0}},
			{{0,1,2},{3,3,3}, {1.0,0.5,0,0,0.5,1.0,0,0,0,0.5,0.25,0,0.5,0.5,0.5,0,0.25,0.5,0,0,0,1.0,0.5,0,0,0.5,1.0}},
			{{1,4,5},{3,3,3}, {1.0,0.5,0,0,0.5,1.0,0,0,0,0.5,0.25,0,0.5,0.5,0.5,0,0.25,0.5,0,0,0,1.0,0.5,0,0,0.5,1.0}}
		};

		std::vector < std::vector<uint32_t> > edges
		{
			{0,	0,	0,	0,	0,	0,	0,	1,	0},
			{0,	0,	0,	0,	0,	0,	0,	0,	1},
			{0,	0,	0,	0,	0,	0,	0,	1,	0},
			{0,	0,	0,	0,	0,	0,	1,	0,	0},
			{0,	0,	0,	0,	0,	0,	0,	0,	1},
			{0,	0,	0,	0,	0,	0,	0,	0,	1},
			{0,	0,	0,	1,	0,	0,	0,	1,	0},
			{1,	0,	1,	0,	0,	0,	1,	0,	1},
			{0,	1,	0,	0,	1,	1,	0,	1,	0}
		};

		CliqueTree c{clique_list, edges};
		
		std::vector<std::vector<Factor>> message_indices(clique_list.size(), std::vector<Factor>(clique_list.size()));
		message_indices[0][7] = { {0},     {3},     {0.01,0.18,0.81} };
		message_indices[1][8] = { {1},     {3},     {0.3333,0.3333,0.3333} };
		message_indices[2][7] = { {2},     {3},     {0.01,0.18,0.81} };
		message_indices[3][6] = { {3},     {3},     {0.3333,0.3333,0.3333} };
		message_indices[4][8] = { {4},     {3},     {0.3333,0.3333,0.3333} };
		message_indices[5][8] = { {5},     {3},     {0.01,0.18,0.81} };
		message_indices[6][7] = { {0,2},   {3,3},   {0.1111,0.1111,0.1111,0.1111,0.1111,0.1111,0.1111,0.1111} };
		message_indices[7][8] = { {1},     {3},     {0.01,0.18,0.81} };

		const auto indices = c.GetNextCliques(message_indices);
		std::pair<uint32_t, uint32_t> expected_indices{ 8,1 };
		EXPECT_EQ(indices, expected_indices);
	}

	TEST(CliqueTree, Calibrate) {
		std::vector<Factor> clique_list{
			{{0,6},  {3,2},   {0.008, 0.108, 0.081, 0.002, 0.072, 0.729}},
			{{1,7},  {3,2},   {0.8, 0.6, 0.1, 0.2, 0.4, 0.9}},
			{{2,8},  {3,2},   {0.008, 0.108, 0.081, 0.002, 0.072, 0.729}},
			{{3,9},  {3,2},   {0.8, 0.6, 0.1, 0.2, 0.4, 0.9}},
			{{4,10}, {3,2},   {0.8, 0.6, 0.1, 0.2, 0.4, 0.9}},
			{{5,11}, {3,2},   {0.008, 0.108, 0.081, 0.002, 0.072, 0.729}},
			{{0,2,3},{3,3,3}, {1.0,0.5,0,0.5,0.25,0,0,0,0,0,0.5,1.0,0.5,0.5,0.5,1.0,0.5,0,0,0,0,0,0.25,0.5,0,0.5,1.0}},
			{{0,1,2},{3,3,3}, {1.0,0.5,0,0,0.5,1.0,0,0,0,0.5,0.25,0,0.5,0.5,0.5,0,0.25,0.5,0,0,0,1.0,0.5,0,0,0.5,1.0}},
			{{1,4,5},{3,3,3}, {1.0,0.5,0,0,0.5,1.0,0,0,0,0.5,0.25,0,0.5,0.5,0.5,0,0.25,0.5,0,0,0,1.0,0.5,0,0,0.5,1.0}}
		};

		std::vector < std::vector<uint32_t> > edges
		{
			{0,	0,	0,	0,	0,	0,	0,	1,	0},
			{0,	0,	0,	0,	0,	0,	0,	0,	1},
			{0,	0,	0,	0,	0,	0,	0,	1,	0},
			{0,	0,	0,	0,	0,	0,	1,	0,	0},
			{0,	0,	0,	0,	0,	0,	0,	0,	1},
			{0,	0,	0,	0,	0,	0,	0,	0,	1},
			{0,	0,	0,	1,	0,	0,	0,	1,	0},
			{1,	0,	1,	0,	0,	0,	1,	0,	1},
			{0,	1,	0,	0,	1,	1,	0,	1,	0}
		};

		std::vector<Factor> clique_list_expected{
			{{0,6},  {3,2},   {0.003,0.036,0.027,0.001,0.024,0.243}},
			{{1,7},  {3,2},   {0.008,0.108,0.081,0.002,0.072,0.729}},
			{{2,8},  {3,2},   {0.003,0.036,0.027,0.001,0.024,0.243}},
			{{3,9},  {3,2},   {0.008,0.108,0.081,0.002,0.072,0.729}},
			{{4,10}, {3,2},   {0.008,0.108,0.081,0.002,0.072,0.729}},
			{{5,11}, {3,2},   {0.003,0.036,0.027,0.001,0.024,0.243}},
			{{0,2,3},{3,3,3}, {0.000,0.000,0.000,0.000,0.003,0.000,0.000,0.000,0.000,0.000,0.000,0.003,0.000,0.005,0.024,0.003,0.024,0.000,0.000,0.000,0.000,0.000,0.003,0.024,0.000,0.024,0.219}},
			{{0,1,2},{3,3,3}, {0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.000,0.001,0.003,0.000,0.000,0.003,0.000,0.000,0.000,0.000,0.003,0.000,0.000,0.003,0.024}},
			{{1,4,5},{3,3,3}, {0.000,0.000,0.000,0.000,0.000,0.001,0.000,0.000,0.000,0.000,0.001,0.000,0.000,0.002,0.008,0.000,0.001,0.008,0.000,0.000,0.000,0.001,0.008,0.000,0.000,0.008,0.073}}
		};

		CliqueTree c{clique_list, edges};

		c.Calibrate();

		ExpectFactorsEqual(c.CliqueList(), clique_list_expected);
	}

	TEST(CliqueTree, CliqueTreeComputeExactMarginalsBP) {
		std::vector <Factor> factor_list{
			{{0},     {3},     {0.01,0.18,0.81}},
			{{1,0,2}, {3,3,3}, {1,0,0,0.5,0.5,0,0,1,0,0.5,0.5,0,0.25,0.5,0.25,0,0.5,0.5,0,1,0,0,0.5,0.5,0,0,1}},
			{{2},     {3},     {0.01,0.18,0.81}},
			{{3,0,2}, {3,3,3}, {1,0,0,0.5,0.5,0,0,1,0,0.5,0.5,0,0.25,0.5,0.25,0,0.5,0.5,0,1,0,0,0.5,0.5,0,0,1}},
			{{4,1,5}, {3,3,3}, {1,0,0,0.5,0.5,0,0,1,0,0.5,0.5,0,0.25,0.5,0.25,0,0.5,0.5,0,1,0,0,0.5,0.5,0,0,1}},
			{{5},     {3},     {0.01,0.18,0.81}},
			{{6,0},   {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{7,1},   {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{8,2},   {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{9,3},   {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{10,4},  {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}},
			{{11,5},  {2,3},   {0.8,0.2,0.6,0.4,0.1,0.9}}
		};

		const auto m = CliqueTreeComputeExactMarginalsBP(factor_list, {}, false);

		std::vector <Factor> expected_marginals{
			{{0},     {3},     {0.01,0.18,0.81}},
			{{1},     {3},     {0.01,0.18,0.81}},
			{{2},     {3},     {0.01,0.18,0.81}},
			{{3},     {3},     {0.01,0.18,0.81}},
			{{4},     {3},     {0.01,0.18,0.81}},
			{{5},     {3},     {0.01,0.18,0.81}},
			{{6},     {2},     {0.1970, 0.8030}},
			{{7},     {2},     {0.1970, 0.8030}},
			{{8},     {2},     {0.1970, 0.8030}},
			{{9},     {2},     {0.1970, 0.8030}},
			{{10},    {2},     {0.1970, 0.8030}},
			{{11},    {2},     {0.1970, 0.8030}}
		};

		ExpectFactorsEqual(m, expected_marginals);
	}

	TEST(CliqueTree, CliqueTreeComputeExactMarginalsBP_NoEvidence) {

		std::vector <Factor> factors{
			{{0},   {2},   {0.4,0.6}},
			{{1,0}, {2,2}, {0.5,0.5,0.9,0.1}},
			{{2,0}, {2,2}, {0.8,0.2,0.2,0.8} },
			{{3,2,1}, {2,2,2}, {1,0,0.1,0.9,0.1,0.9,0.01,0.99}}
		};

		const auto m = CliqueTreeComputeExactMarginalsBP(factors, {}, false);

		std::vector <Factor> expected_marginals{
			{{0}, {2}, {0.40,0.60}},
			{{1}, {2}, {0.74,0.26}},
			{{2}, {2}, {0.44,0.56}},
			{{3}, {2}, {0.333,0.6667}}
		};

		ExpectFactorsEqual(m, expected_marginals);
	}

	TEST(CliqueTree, CliqueTreeComputeExactMarginalsBP_WithEvidence) {

		std::vector <Factor> factors{
			{{0},   {2},   {0.4,0.6}},
			{{1,0}, {2,2}, {0.5,0.5,0.9,0.1}},
			{{2,0}, {2,2}, {0.8,0.2,0.2,0.8} },
			{{3,2,1}, {2,2,2}, {1,0,0.1,0.9,0.1,0.9,0.01,0.99}}
		};

		const std::vector<std::pair<uint32_t, uint32_t>> evidence{ {0,0},  {1,1} };
		const auto m = CliqueTreeComputeExactMarginalsBP(factors, evidence, false);

		std::vector <Factor> expected_marginals{
			{{0}, {2}, {1.0,0.0}},
			{{1}, {2}, {0.0,1.0}},
			{{2}, {2}, {0.8,0.2}},
			{{3}, {2}, {0.082,0.918}}
		};

		ExpectFactorsEqual(m, expected_marginals);
	}

	TEST(CliqueTree, CalibrateMax) {
		std::vector <Factor> clique_list_log{
			{{0,1},  {2,2},   {3,-1,0,1}},
			{{1,2},  {2,2},   {4,0.2,1.5,2}}
		};

		std::vector <Factor> clique_list{
			{{0,1},  {2,2},   {20.08553692,0.36787944,1,2.71828183}},
			{{1,2},  {2,2},   {54.59815003,1.22140276,4.48168907,7.3890561}}
		};

		std::vector < std::vector<uint32_t> > edges
		{
			{0,1},
			{1,0}
		};

		std::vector<Factor> clique_list_expected{
			{{0,1},  {2,2},   {7,3,2,3}},
			{{1,2},  {2,2},   {7,1.2,4.5,3}}
		};

		CliqueTree c{clique_list, edges};

		c.CalibrateMax();

		ExpectFactorsEqual(c.CliqueList(), clique_list_expected);
	}

	TEST(CliqueTree, CliqueTreeMarginalsMaxDecoding) {
		//    For instance: Let's say we have two variables 1 and 2. 
		//    Marginals for 1 = [0.1, 0.3, 0.6]
		//    Marginals for 2 = [0.92, 0.08]
		//    A(1) = 3, A(2) = 1.
		std::vector <Factor> marginals{
			{{0},     {3},     {0.1, 0.3, 0.6}},
			{{1},     {2},     {0.92, 0.08}}
		};
		std::vector<uint32_t> expected_a{ 2,0 };

		const auto a = CliqueTreeMarginalsMaxDecoding(marginals);

		EXPECT_EQ(a, expected_a);
	}

	TEST(CliqueTree, ComputeExactMarginalsBPMax) {
		std::vector <Factor> factor_list{
			{{0},   {2},   {0.4,0.6}},
			{{1,0}, {2,2}, {0.1,0.9,0.5,0.5}}
		};

		const auto m = CliqueTreeComputeExactMarginalsBP(factor_list, {}, true);

		std::vector <Factor> expected_marginals{
			{{0},     {2},     {-1.022,-1.204}},
			{{1},     {2},     {-1.204,-1.022}}
		};

		ExpectFactorsEqual(m, expected_marginals);
	}

	TEST(CliqueTree, ComputeMapAssignment)
	{
		std::vector <Factor> factor_list{
			{{0},   {2},   {0.4,0.6}},
			{{1,0}, {2,2}, {0.1,0.9,0.5,0.5}}
		};
		const auto joint = ComputeJointDistribution(factor_list);
		const double joint_max_value_expected = *std::max_element(joint.Val().begin(), joint.Val().end());

		const auto m = CliqueTreeComputeExactMarginalsBP(factor_list, {}, true);
		const auto a = CliqueTreeMarginalsMaxDecoding(m);
		const double joint_max_value_map = joint.GetValueOfAssignment(a);

		EXPECT_NEAR(joint_max_value_map, joint_max_value_expected,0.001);

	}

}